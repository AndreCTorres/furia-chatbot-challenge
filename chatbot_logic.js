// chatbot_logic.js
const dataLoader = require("./dataLoader"); // Importa o dataLoader que est√° na mesma pasta

function getRandom(arr) {
    if (!arr || arr.length === 0) return null;
    return arr[Math.floor(Math.random() * arr.length)];
}

// Curiosidades manuais por jogador/t√©cnico
const playerCuriosities = {
    "FalleN": [
        "Come√ßou a jogar Counter-Strike aos 12 anos, influenciado por seu irm√£o e pelo ambiente familiar ligado √† tecnologia. Seus pais eram donos de uma loja de inform√°tica, o que facilitou seu acesso aos jogos eletr√¥nicos.",
        "Seu nick \"FalleN\" foi inspirado na carta \"Fallen Angel\" do jogo de cartas Magic: The Gathering, que ele jogava antes de se dedicar ao Counter-Strike.",
        "Conquistou dois t√≠tulos de Major consecutivos: MLG Columbus 2016 e ESL One Cologne 2016, sendo reconhecido como um dos melhores AWPers e l√≠deres do mundo.",
        "Fundou a Games Academy, uma plataforma de ensino para jogadores de CS, que posteriormente se fundiu √† Gamers Club. Tamb√©m possui sua pr√≥pria linha de perif√©ricos, a Fallen Gear, al√©m da sua loja, a Fallen Store.",
        "Revelou possuir mais de 50 mil horas jogadas em todas as vers√µes do Counter-Strike, o equivalente a aproximadamente 5 anos e 7 meses de jogo cont√≠nuo. Ele planeja alcan√ßar 52 mil horas antes de considerar a aposentadoria.",
        "Durante o Major de Xangai, FalleN liderou a FURIA at√© as quartas de final, destacando-se por uma jogada memor√°vel contra a equipe alem√£ BIG, advers√°rio que nunca havia vencido anteriormente.",
    ],
    "kscerato": [
        "Durante o PGL Major Stockholm 2021, KSCERATO homenageou seu irm√£o, Kauan \"KNCERATO\" Cerato, incluindo seu nome em seu adesivo oficial do torneio. Ele expressou que seu irm√£o foi fundamental para sua entrada no mundo do Counter-Strike e que juntos sonhavam em viver do jogo.",
        "Foi eleito o melhor atleta de CS:GO no Pr√™mio eSports Brasil 2023, destacando-se como o principal jogador brasileiro da modalidade naquele ano.",
        "√â considerado um dos melhores riflers do Brasil e √© conhecido por sua habilidade em situa√ß√µes de clutch. Durante sua carreira, venceu mais de 40 situa√ß√µes de 1x1 e possui um rating positivo em todos os grandes eventos que disputou.",
        "skullz j√° chegou a afirmar que KSCERATO √© o jogador mais talentoso com quem j√° jogou, destacando sua habilidade e impacto no jogo.",
    ],
    "yuurih": [
        "√â o jogador mais antigo da line-up e pe√ßa fundamental da FURIA desde 2017.",
        "Durante a IEM Cologne 2024, utilizou uma AK-47 Blue Gem emprestada por Neymar, avaliada em aproximadamente R$ 280 mil.",
        "√â f√£ de animes e j√° chegou a comparar o FalleN ao personagem All Might de \"My Hero Academia\", destacando sua import√¢ncia como um mentor e l√≠der dentro da equipe."
    ],
    "molodoy":[
        "√â natural do Cazaquist√£o, pa√≠s que j√° revelou talentos como Abay \"HObbit\" Khassenov e Aleksei \"Qikert\" Golubev.",
        "Iniciou sua trajet√≥ria competitiva aos 15 anos, jogando em LAN houses locais e enfrentando desafios como ping superior a 100ms, mas ainda assim conseguiu superar os 3.500 de elo na FACEIT.",
        "Antes de ingressar na FURIA, atuou por equipes como ALLINNERS, DMS e AMKAL.",
        "Sua estreia oficial pela FURIA est√° prevista para o PGL Astana 2025, que acontecer√° entre os dias 10 e 18 de maio, no Cazaquist√£o, seu pa√≠s natal."
    ],
    "YEKINDAR":[
        "Nascido em 4 de outubro de 1999, na Let√¥nia, iniciou sua carreira profissional no Counter-Strike em 2017, passando por equipes como Elements Pro Gaming, pro100 e Virtus.pro.",
        "Reconhecido como um dos entry fraggers mais agressivos do mundo, YEKINDAR se destacou por abrir espa√ßos com intelig√™ncia e timing preciso, especialmente durante sua passagem pela Virtus.pro.",
        "Entre suas principais conquistas est√£o os t√≠tulos da Flashpoint Season 2, DreamHack Open December 2020 e cs_summit 7, al√©m de desempenhos de destaque em torneios como IEM Katowice e PGL Major Stockholm 2021.",
    ],
    "chelo": [
        "Come√ßou sua trajet√≥ria profissional no Counter-Strike em 2015, passando por equipes como Army5 Gaming, paiN Gaming, Luminosity Gaming, INTZ e MIBR antes de ingressar na FURIA em julho de 2023.",
        "Durante sua passagem pela FURIA, chelo participou de 37 campeonatos, conquistando t√≠tulos como o BGS Esports 2023 e o Elisa Masters Espoo 2023.",
        "Conhecido por sua intensidade, chelo afirmou em entrevista que √© \"movido a base do √≥dio para jogar\", destacando sua motiva√ß√£o extra em partidas decisivas."
    ],
    "skullz": [
        "Come√ßou sua trajet√≥ria profissional no Counter-Strike em 2017, passando por equipes como YeaH Gaming, W7M Gaming, Team oNe e paiN Gaming.",
        "Durante sua passagem pela FURIA, skullz participou de diversos campeonatos, incluindo o PGL Bucharest 2025 e o BLAST Open Lisbon 2025.",
        "Em julho de 2024, ingressou na FURIA como parte de uma renova√ß√£o na equipe."
    ],
    "sidde": [
        "Ingressou na FURIA em 2023, assumindo o cargo de treinador principal. Sua contrata√ß√£o foi parte de uma reestrutura√ß√£o da equipe.",
        "Enfatiza a import√¢ncia de uma mentalidade s√≥lida e de processos bem definidos para o sucesso da equipe. Ele acredita que a consist√™ncia e o trabalho √°rduo s√£o fundamentais para alcan√ßar altos n√≠veis de desempenho.",
        "Sua ascens√£o sem experi√™ncia pr√©via como jogador profissional serve de inspira√ß√£o para muitos aspirantes a treinadores, demonstrando que dedica√ß√£o, estudo e vis√£o estrat√©gica podem levar ao sucesso no competitivo mundo dos esports."
    ]
};

// Frases de introdu√ß√£o para curiosidades de jogadores
const curiosidadeIntros = [
    "Voc√™ sabia?<br>",
    "Olha s√≥ essa:<br>",
    "Curiosidade quente!<br>",
    "Fato interessante:<br>",
    "Essa √© boa:<br>",
    "Aten√ß√£o para essa:<br>",
    "Anota a√≠:<br>",
    "Surpreenda-se:<br>",
    "PanteraBot conta:<br>",
    "Direto do servidor:<br>"
];

// Varia√ß√µes de sauda√ß√£o
const saudacoes = [
    "Opa! Sou o PanteraBot da FURIA! Como posso ajudar voc√™ hoje? Pode perguntar, fica a vontade!",
    "Fala, FURIOSO! üëä Pronto para saber tudo sobre a FURIA? T√¥ aqui pra isso! Manda a boa!",
    "E a√≠, torcedor(a)! O que voc√™ quer saber sobre a FURIA? Estou aqui para te ajudar",
    "E a√™! Aqui √© o PanteraBot. Estou pronto pra passar todas as infos da FURIA pra voc√™!",
    "Seja bem-vindo ao PanteraBot! Aqui voc√™ fica por dentro de tudo sobre o seu time do cora√ß√£o!"
];

async function processMessage(message, context = {}) {
    // Garante que os dados estejam carregados
    if (!dataLoader.data || Object.keys(dataLoader.data).length === 0) {
        return {
            response: "Desculpe, ainda estou carregando as informa√ß√µes da FURIA. Tente novamente em alguns segundos!",
            actions: null,
            context,
            showFeedback: false
        };
    }

    const msg = message.toLowerCase();
    // --- Gera√ß√£o din√¢mica dos nomes dos jogadores do elenco atual ---
    const elencoPlayers = [
        ...(dataLoader.data.players || [])
    ];
    // Extrai nomes e nicks √∫nicos
    const nomesJogadores = Array.from(new Set(
        elencoPlayers.flatMap(p => [p.name, p.nick, p.slug, p.fullname])
            .filter(Boolean)
            .map(n => n.toLowerCase())
    ));
    // Monta regex din√¢mica (corrigido para n√£o escapar excessivamente)
    const jogadoresRegex = nomesJogadores.length > 0 ? new RegExp(`(${nomesJogadores.map(n => n.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")).join("|")})`, "i") : null;

    // Inicializa contador de feedback se n√£o existir
    if (typeof context.feedbackCounter !== 'number') {
        context.feedbackCounter = 0;
    }
    // Fun√ß√£o para decidir se mostra feedback
    function shouldShowFeedback(tipoMensagem) {
        if (tipoMensagem === 'saudacao') return false;
        context.feedbackCounter++;
        return context.feedbackCounter % 3 === 0;
    }

    // Sauda√ß√µes
    if (/^(oi|ol√°|eae|fala|hey)/i.test(msg)) {
        const saudacao = getRandom(saudacoes);
        return {
            response: `${saudacao}\n\nDica: Use os bot√µes de acesso r√°pido abaixo para navegar entre as principais informa√ß√µes!`,
            actions: null,
            context,
            showFeedback: false
        };
    }
    // Ranking atual
    if (/(ranking|posi√ß√£o|posicao|classifica√ß√£o|classificacao|rank|coloca√ß√£o|colocacao|top|ranking atual)/i.test(msg)) {
        let ranking = dataLoader.data.ranking;
        if (ranking) {
            let pontos = ranking.points ? `com ${ranking.points} pontos` : "";
            return {
                response: `A FURIA est√° atualmente na ${ranking.place}¬™ posi√ß√£o do ranking mundial da HLTV ${pontos}!\n\nSeguimos juntos na torcida para subir ainda mais! ü§çüñ§`,
                actions: [
                    { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                    { label: "Membros da Equipe", message: "elenco" },
                    { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
                ],
                context,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        return {
            response: "N√£o consegui acessar o ranking agora, mas logo logo trago essa info pra voc√™!",
            actions: [
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                { label: "Ver Not√≠cias", message: "not√≠cias" }
            ],
            context,
            showFeedback: shouldShowFeedback('normal')
        };
    }
    // √öltimas not√≠cias
    if (/(not√≠cias|noticias|news|novidades|acontecendo)/i.test(msg)) {
        // Corrigir: garantir que dataLoader.data.news est√° preenchido corretamente
        // e que o frontend est√° esperando um array de not√≠cias no formato correto.
        const news = dataLoader.data.news;
        let offset = context.newsOffset || 0;
        if (!news || !Array.isArray(news) || news.length === 0) {
            return {
                response: "No momento n√£o consegui acessar as not√≠cias da HLTV sobre a FURIA. Tente novamente em alguns minutos ou acesse diretamente em <a href='https://www.hltv.org/search?query=furia' target='_blank'>HLTV.org</a>.",
                actions: [
                    { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                    { label: "Membros da Equipe", message: "elenco" },
                    { label: "Ver Ranking", message: "ranking atual" }
                ],
                context,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        // Garante que cada not√≠cia tem title e link v√°lidos
        const newsToShow = news.slice(offset, offset + 5).filter(n => n && n.title && n.link);
        let infoText = "As not√≠cias s√£o coletadas diretamente do site da HLTV e est√£o em ingl√™s. Clique no t√≠tulo para ler a not√≠cia completa.";
        let newsText = newsToShow.map((n, i) => {
            let finalLink = n.link;
            if (finalLink && typeof finalLink === 'string' && finalLink.startsWith('/news/')) {
                finalLink = `https://www.hltv.org${finalLink}`;
            }
            if (finalLink && typeof finalLink === 'string' && finalLink.startsWith('http://localhost:3000/news/')) {
                finalLink = `https://www.hltv.org${finalLink.substring('http://localhost:3000'.length)}`;
            }
            // Adiciona classe furia-link para estiliza√ß√£o no frontend
            return `${offset + i + 1}. <a href='${finalLink}' target='_blank' class='furia-link'>${n.title}</a>`;
        }).join("<br>");
        let actions = [
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
            { label: "Membros da Equipe", message: "elenco" },
            { label: "Ver Ranking", message: "ranking atual" }
        ];
        return {
            response: `${infoText}<br><br>√öltimas not√≠cias relacionadas a FURIA (HLTV):<br>${newsText}`,
            actions,
            context: { ...context, newsOffset: offset + 5 },
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Informa√ß√µes sobre jogadores espec√≠ficos (din√¢mico)
    if (jogadoresRegex && jogadoresRegex.test(msg)) {
        const playerName = msg.match(jogadoresRegex)[0].toLowerCase();
        const curiosidadeKey = Object.keys(playerCuriosities).find(
            key => key.toLowerCase() === playerName
        );
        if (curiosidadeKey) {
            const curiosidade = getRandom(playerCuriosities[curiosidadeKey]);
            const intro = getRandom(curiosidadeIntros);
            return {
                response: `${intro} <b>${curiosidadeKey.toUpperCase()}</b>:\n${curiosidade}`,
                actions: [
                    { label: "Quero outra curiosidade", message: `outra curiosidade sobre ${curiosidadeKey}`, isPrimary: true }
                ],
                context: { ...context, lastPlayer: curiosidadeKey },
                showFeedback: shouldShowFeedback('normal')
            };
        }
        let player = elencoPlayers.find(p => {
            return [p.name, p.nick, p.slug, p.fullname].filter(Boolean).map(n => n.toLowerCase()).includes(playerName);
        });
        if (player) {
            return {
                response: `Info sobre ${player.name || player.nick || player.slug}:\n‚Ä¢ Fun√ß√£o: ${player.role || player.type || "N√£o dispon√≠vel"}\n‚Ä¢ Nacionalidade: ${player.nationality || (player.country && player.country.name) || "N√£o dispon√≠vel"}\n‚Ä¢ Mapas jogados: ${player.mapsPlayed || "N√£o dispon√≠vel"}\n‚Ä¢ Tempo no time: ${player.timeOnTeam || "N√£o dispon√≠vel"}`,
                actions: [
                    { label: "Quero uma curiosidade desse jogador", message: `curiosidade sobre ${player.nick || player.name}` }
                ],
                context,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        return {
            response: "N√£o consegui encontrar informa√ß√µes sobre esse jogador.",
            actions: [
                { label: "Membros da Equipe", message: "elenco" },
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
            ],
            context,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Se usu√°rio pedir outra curiosidade (usando contexto)
    if (/outra curiosidade/.test(msg) && context.lastPlayer) {
        const curiosidadeKey = context.lastPlayer;
        const curiosidades = playerCuriosities[curiosidadeKey];
        // Busca as j√° exibidas para esse jogador
        const exibidas = (context.curiosidadesExibidas && context.curiosidadesExibidas[curiosidadeKey]) || [];
        // Filtra as curiosidades restantes
        const restantes = curiosidades.filter(c => !exibidas.includes(c));
        if (restantes.length === 0) {
            // Lista de outros jogadores para sugerir
            const outrosJogadores = elencoPlayers
                .map(p => p.nick || p.name || p.fullname)
                .filter(Boolean)
                .filter(j => j.toLowerCase() !== curiosidadeKey.toLowerCase());
            return {
                response: `Voc√™ j√° viu todas as curiosidades sobre <b>${curiosidadeKey.toUpperCase()}</b>! No momento n√£o tenho mais novidades desse membro.<br><br>Que tal escolher outro jogador ou o t√©cnico para saber mais?`,
                actions: [
                    { label: "Ver outros jogadores", message: "elenco", isPrimary: true },
                    { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                    { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
                ],
                jogadores: outrosJogadores,
                context: { ...context, lastPlayer: undefined },
                showFeedback: shouldShowFeedback('normal')
            };
        }
        // Sorteia uma curiosidade que ainda n√£o foi exibida
        const curiosidade = getRandom(restantes);
        const intro = getRandom(curiosidadeIntros);
        // Atualiza contexto para n√£o repetir
        const novoContexto = { ...context };
        if (!novoContexto.curiosidadesExibidas) novoContexto.curiosidadesExibidas = {};
        if (!novoContexto.curiosidadesExibidas[curiosidadeKey]) novoContexto.curiosidadesExibidas[curiosidadeKey] = [];
        novoContexto.curiosidadesExibidas[curiosidadeKey].push(curiosidade);
        novoContexto.lastPlayer = curiosidadeKey;
        return {
            response: `${intro} <b>${curiosidadeKey.toUpperCase()}</b>:\n${curiosidade}`,
            actions: [
                { label: "Quero mais uma!", message: `outra curiosidade sobre ${curiosidadeKey}`, isPrimary: true }
            ],
            context: novoContexto,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Curiosidade individual de jogador/t√©cnico (com controle de repeti√ß√£o)
    const nomesValidos = elencoPlayers.map(p => (p.nick || p.name || p.fullname || "").toLowerCase());
    for (const nome of Object.keys(playerCuriosities)) {
        const nomeRegex = new RegExp(`\\b${nome.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")}\\b`, "i");
        if (nomeRegex.test(msg) && nomesValidos.some(n => n.includes(nome))) {
            // Controle de curiosidades j√° exibidas
            let curiosidades = playerCuriosities[nome];
            let exibidas = (context.curiosidadesExibidas && context.curiosidadesExibidas[nome]) || [];
            let restantes = curiosidades.filter(c => !exibidas.includes(c));
            if (restantes.length === 0) {
                // Mostra mensagem de fim e bot√£o para ver outros jogadores
                // Lista de jogadores dispon√≠veis (nicks)
                const outrosJogadores = elencoPlayers
                    .map(p => p.nick || p.name || p.fullname)
                    .filter(Boolean)
                    .filter(j => j.toLowerCase() !== nome.toLowerCase());
                return {
                    response: `Voc√™ j√° viu todas as curiosidades sobre <b>${nome.toUpperCase()}</b>! No momento n√£o tenho mais novidades desse membro.<br><br>Que tal escolher outro jogador ou o t√©cnico para saber mais?`,
                    actions: [
                        { label: "Ver outros jogadores", message: "elenco", isPrimary: true },
                        { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                        { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
                    ],
                    jogadores: outrosJogadores,
                    context,
                    showFeedback: shouldShowFeedback('normal')
                };
            }
            const curiosidade = getRandom(restantes);
            const intro = getRandom(curiosidadeIntros);
            // Atualiza contexto
            const novoContexto = { ...context };
            if (!novoContexto.curiosidadesExibidas) novoContexto.curiosidadesExibidas = {};
            if (!novoContexto.curiosidadesExibidas[nome]) novoContexto.curiosidadesExibidas[nome] = [];
            novoContexto.curiosidadesExibidas[nome].push(curiosidade);
            novoContexto.lastPlayer = nome;
            return {
                response: `${intro} <b>${nome.toUpperCase()}</b>:\n${curiosidade}`,
                actions: [
                    { label: "Quero outra curiosidade", message: `outra curiosidade sobre ${nome}`, isPrimary: true }
                ],
                context: novoContexto,
                showFeedback: shouldShowFeedback('normal')
            };
        }
    }

    // Se usu√°rio disser "n√£o" ap√≥s curiosidade
    if ((/n√£o|nao|chega/i.test(msg)) && context.lastPlayer) {
        return {
            response: "Beleza! Se quiser saber mais sobre outro jogador ou qualquer coisa da FURIA, √© s√≥ perguntar! ü¶ä",
            actions: [
                { label: "Membros da Equipe", message: "elenco" },
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
            ],
            context: { ...context, lastPlayer: undefined },
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Sugest√£o de elenco atual
    if (/(jogadores|jogador|player|players|elenco|time|plantel|roster|squad)/i.test(msg)) {
        const elencoPlayers = dataLoader.data.players || [];
        const nomes = elencoPlayers.map(p => p.nick || p.name || p.fullname).filter(Boolean);
        return {
            response: "Quer saber mais sobre algum dos nossos guerreiros? Clique no nick que eu te conto algo interessante!",
            actions: [
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                { label: "Ver Ranking", message: "ranking atual" },
                { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
            ],
            context,
            jogadores: nomes,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Curiosidades e conte√∫do de f√£s
    if (/(curiosidade|fato|conta|interessante)/i.test(msg)) {
        const fanCuriosidades = (dataLoader.data.fanContent && dataLoader.data.fanContent.curiosidades) ? dataLoader.data.fanContent.curiosidades : [];
        const marcos = dataLoader.data.historicoFuria.marcos || [];
        const elenco = dataLoader.data.historicoFuria.elenco || [];
        const melhores = dataLoader.data.historicoFuria.melhoresColocacoes || [];
        const majors = dataLoader.data.historicoFuria.majors || [];
        // Monta um array de curiosidades √∫nicas e envolventes
        let todas = [];
        todas.push(...fanCuriosidades.map(c => ({ tipo: 'curiosidade', texto: c })));
        todas.push(...marcos.map(m => ({ tipo: 'marco', texto: `Em ${m.ano}, a FURIA marcou hist√≥ria: ${m.descricao}` })));
        todas.push(...elenco.map(e => ({ tipo: 'elenco', texto: `No ano de ${e.ano}: ${e.descricao}` })));
        todas.push(...melhores.map(m => ({ tipo: 'melhor', texto: `Melhor resultado: ${m.evento} - ${m.resultado}${m.destaque ? ' | Destaque: ' + m.destaque : ''}${m.detalhe ? ' | Detalhe: ' + m.detalhe : ''}` })));
        todas.push(...majors.map(m => ({ tipo: 'major', texto: `Participa√ß√£o em ${m.nome} (${m.ano}): ${m.colocacao}` })));
        // Controle de repeti√ß√£o
        let exibidas = context.curiosidadesFuriaExibidas || [];
        let restantes = todas.filter(c => !exibidas.includes(c.texto));
        if (restantes.length === 0) {
            return {
                response: "Voc√™ j√° descobriu todas as curiosidades e fatos marcantes da FURIA por enquanto! Em breve teremos mais novidades para voc√™! ü¶ä‚ú®",
                actions: [
                    { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                    { label: "Membros da Equipe", message: "elenco" }
                ],
                context,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        const curiosidade = getRandom(restantes);
        let novoContexto = { ...context };
        novoContexto.curiosidadesFuriaExibidas = [...(novoContexto.curiosidadesFuriaExibidas || []), curiosidade.texto];
        let intro = '';
        let responseHtml = '';
        switch (curiosidade.tipo) {
            case 'marco': 
                intro = 'Momento marcante da FURIA:'; 
                responseHtml = `
                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                        <div style="background:rgba(42,42,42,0.92);border:2px solid #FFD700;border-radius:16px;padding:0.7rem 1rem;max-width:95%;margin-bottom:0.3rem;box-shadow:0 2px 8px 0 rgba(0,0,0,0.13);text-align:center;">
                            <b>${intro}</b> ${curiosidade.texto}
                        </div>
                    </div>
                `;
                break;
            case 'elenco': 
                intro = 'üë• Mudan√ßa de elenco:'; 
                responseHtml = `
                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                        <div style="background:rgba(42,42,42,0.92);border:2px solid #FFD700;border-radius:16px;padding:0.7rem 1rem;max-width:95%;margin-bottom:0.3rem;box-shadow:0 2px 8px 0 rgba(0,0,0,0.13);text-align:center;">
                            <b>${intro}</b> ${curiosidade.texto}
                        </div>
                    </div>
                `;
                break;
            case 'melhor': 
                intro = 'üèÖ Resultados relevantes:'; 
                responseHtml = `
                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                        <div style="background:rgba(42,42,42,0.92);border:2px solid #FFD700;border-radius:16px;padding:0.7rem 1rem;max-width:95%;margin-bottom:0.3rem;box-shadow:0 2px 8px 0 rgba(0,0,0,0.13);text-align:center;">
                            <b>${intro}</b> ${curiosidade.texto}
                        </div>
                    </div>
                `;
                break;
            case 'major': {
                const match = curiosidade.texto.match(/^Participa√ß√£o marcante em (.+) \((\d{4})\): (.+)$/);
                let majorText = '';
                if (match) {
                    const nome = match[1];
                    const ano = match[2];
                    const colocacao = match[3];
                    majorText = `A FURIA participou do <b>${nome}</b>, realizado no ano de <b>${ano}</b>, e conquistou a coloca√ß√£o <b>${colocacao}</b> no campeonato.`;
                } else {
                    majorText = curiosidade.texto;
                }
                intro = 'üåç Major:';
                responseHtml = `
                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                        <div style="background:rgba(42,42,42,0.92);border:2px solid #FFD700;border-radius:16px;padding:0.7rem 1rem;max-width:95%;margin-bottom:0.3rem;box-shadow:0 2px 8px 0 rgba(0,0,0,0.13);text-align:center;">
                            <b>${intro}</b> ${majorText}
                        </div>
                    </div>
                `;
                break;
            }
            default: 
                intro = '‚ú® Fato curioso:'; 
                responseHtml = `
                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                        <div style="background:rgba(42,42,42,0.92);border:2px solid #FFD700;border-radius:16px;padding:0.7rem 1rem;max-width:95%;margin-bottom:0.3rem;box-shadow:0 2px 8px 0 rgba(0,0,0,0.13);text-align:center;">
                            <b>${intro}</b> ${curiosidade.texto}
                        </div>
                    </div>
                `;
                break;
        }
        return {
            response: responseHtml,
            actions: [
                { label: "Quero outra curiosidade", message: "curiosidade sobre FURIA", isPrimary: true }
            ],
            context: novoContexto,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Mensagens de apoio e torcida
    if (/(vamo|torcida|apoio|for√ßa)/i.test(msg)) {
        const frasesTorcida = (dataLoader.data.fanContent && dataLoader.data.fanContent.frasesTorcida) ? dataLoader.data.fanContent.frasesTorcida : [];
        const randomFrase = getRandom(frasesTorcida);
        return {
            response: randomFrase,
            actions: [
                { label: "Quero outra frase de torcida", message: "frase de torcida" },
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
            ],
            context,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // === Consultas hist√≥ricas e institucionais FURIA ===
    if (/(funda√ß√£o|fundacao|fundadores|origem|hist√≥ria|historia|sede|quando a furia foi criada|quem criou a furia|quem s√£o os fundadores|quem sao os fundadores|onde fica a sede|onde nasceu a furia|fundou a furia|criou a furia|fundador da furia|fundadores da furia|historia da furia|hist√≥rico da furia|hist√≥rico furia|historia furia)/i.test(msg)) {
        return { response: dataLoader.getFuriaFundacao(), actions: [
            { label: "Membros da Equipe", message: "elenco" },
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
            { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
        ], context, showFeedback: shouldShowFeedback('normal') };
    }
    if (/(mudan√ßa|mudancas|elenco|transfer√™ncia|transferencias|refor√ßo|reforcos|reformula√ß√£o|reformulacao|contrata√ß√£o|contratacao|contrata√ß√µes|contratacoes|quem entrou|quem saiu|quem chegou|quem foi contratado|quem foi movido|quem foi para o banco|quem saiu do time|mudou o elenco|mudan√ßas no time|mudan√ßas no elenco|mudan√ßas furia|mudou furia|elenco furia|elenco atual|elenco antigo|elenco base|elenco principal)/i.test(msg)) {
        return { response: dataLoader.getFuriaElenco(), actions: [
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
            { label: "Ver Ranking", message: "ranking atual" }
        ], context, showFeedback: shouldShowFeedback('normal') };
    }
    if (/(marco|marcos|feito|feitos|conquista|conquistas|hist√≥rico|historico|momento marcante|momentos marcantes|fatos marcantes|fato marcante|marcante|hist√≥rico furia|historia furia|hist√≥rico da furia|historia da furia|fatos hist√≥ricos|fatos historicos|acontecimentos marcantes|acontecimento marcante)/i.test(msg)) {
        return { response: dataLoader.getFuriaMarcos(), actions: [
            { label: "Ver T√≠tulos", message: "t√≠tulos furia" },
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
        ], context, showFeedback: shouldShowFeedback('normal') };
    }
    if (/(major|majors|mundial|valve|campeonato grande|participa√ß√£o em major|participacoes em major|quais majors|quais mundiais|furia em major|furia em mundial|furia major|furia mundial|participou de major|participou de mundial|lista de majors|lista de mundiais|todos os majors|todos os mundiais)/i.test(msg)) {
        return { response: dataLoader.getFuriaMajors(), actions: [
            { label: "Ver Melhores Coloca√ß√µes", message: "melhores coloca√ß√µes" },
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
        ], context, showFeedback: shouldShowFeedback('normal') };
    }
    if (/(melhor coloca√ß√£o|melhores coloca√ß√µes|melhor resultado|melhores resultados|melhor campanha|melhores campanhas|resultado hist√≥rico|resultado historico|resultado marcante|campanha marcante|campanhas marcantes|melhor desempenho|melhores desempenhos|melhor posi√ß√£o|melhores posi√ß√µes|melhor colocacao|melhores colocacoes)/i.test(msg)) {
        return { response: dataLoader.getFuriaMelhoresColocacoes(), actions: [
            { label: "Ver T√≠tulos", message: "t√≠tulos furia" },
            { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" }
        ], context, showFeedback: shouldShowFeedback('normal') };
    }
    if (/(t√≠tulo|titulos|campe√£o|campea|campeonatos ganhos|campeonatos conquistados|quais t√≠tulos|quais titulos|quais campeonatos|furia campe√£|furia campea|furia ganhou|furia venceu|furia foi campe√£|furia foi campea|t√≠tulos furia|titulos furia|campeonatos furia|campeonatos que a furia ganhou|campeonatos que a furia venceu|campeonatos que a furia foi campe√£|campeonatos que a furia foi campea|campeonatos que a furia conquistou|campeonatos conquistados furia|campeonatos ganhos furia)/i.test(msg)) {
        const titulosData = dataLoader.getFuriaTitulos(true);
        let titulos = titulosData.titulos || [];
        // Monta visualmente cada t√≠tulo, incluindo destaque com texto din√¢mico
        let titulosHtml = titulos.map((t, idx) => {
            let ano = t.datas ? (t.datas.match(/\d{4}/)?.[0] || '') : '';
            let destaqueHtml = '';
            if (t.destaque) {
                destaqueHtml = `<div class="titulo-destaque" style="margin-top:0.25rem;color:#FFD700;font-size:0.98em;white-space:normal;word-break:break-word;">${gerarTextoDinamicoDestaque(t.destaque, t.nome, ano)}</div>`;
            }
            return `<div class="titulo-item" style="margin-bottom:1.1rem;">
                <div class="titulo-nome" style="font-weight:bold;font-size:1.13em;color:#FFD700;">${idx+1}. üèÜ ${t.nome}${ano ? ` (${ano})` : ''}</div>
                <div class="titulo-final" style="margin-left:1.1em;">‚Ä¢ Final: ${t.final}</div>
                ${destaqueHtml}
            </div>`;
        }).join('');
        return {
            response: {
                type: 'card',
                className: 'bot-card',
                title: 'A FURIA j√° levantou v√°rios canecos! Veja os principais t√≠tulos abaixo:<br>',
                desc: titulosHtml
            },
            actions: [
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                { label: "Ver Ranking", message: "ranking atual" },
                { label: "Membros da Equipe", message: "elenco" }
            ],
            context: { ...context, titulos: titulos },
            showFeedback: shouldShowFeedback('normal')
        };
    }
    if (/(gloss√°rio|glossario|g√≠ria|giria|g√≠rias|girias|termo|termos|iniciante|iniciante cs|iniciante no cs|palavras do cs|palavras do jogo|como funciona o ranking|o que √© rating|o que √© hltv|o que significa|n√£o entendo|nao entendo|explica|explica√ß√£o|explicacao|como funciona|como √©|como e|como se fala|como se chama|como se diz|palavras comuns|palavras usadas|palavras do chat|palavras da transmiss√£o|palavras da galera|palavras do csgo|palavras do cs2|dicion√°rio cs|dicionario cs|dicion√°rio do cs|dicionario do cs|dicion√°rio furia|dicionario furia|dicion√°rio do furia|dicionario do furia)/i.test(msg)) {
        const glossario = dataLoader.data.historicoFuria.glossario;
        const termos = [
            ...glossario.termos.map(t => ({ tipo: 'termo', termo: t.termo, descricao: t.descricao })),
            { tipo: 'extra', termo: 'HLTV', descricao: glossario.hltv },
            { tipo: 'extra', termo: 'Ranking', descricao: glossario.ranking },
            { tipo: 'extra', termo: 'Rating', descricao: glossario.rating },
            ...dataLoader.data.historicoFuria.tiposCampeonatos.map(tc => ({ tipo: 'tipoCampeonato', termo: tc.tipo, descricao: tc.descricao }))
        ];
        let exibidos = context.termosExibidos || [];
        let isFirstTime = exibidos.length === 0;
        let restantes = termos.filter(t => !exibidos.includes(t.termo));
        if (restantes.length === 0) {
            return {
                response: "Voc√™ j√° viu todos os termos e conceitos do CS por enquanto! üß†üí° Em breve trarei mais novidades para voc√™ se divertir e aprender.",
                actions: [
                    { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                    { label: "Membros da Equipe", message: "elenco" }
                ],
                context,
                showFeedback: shouldShowFeedback("normal")
            };
        }
        const termo = getRandom(restantes);
        let novoContexto = { ...context };
        novoContexto.termosExibidos = [...exibidos, termo.termo];
        const icones = {
            'HLTV': 'üìä',
            'Ranking': 'üèÖ',
            'Rating': '‚≠ê',
            'tipoCampeonato': 'üèÜ',
            'termo': 'üéØ',
            'extra': 'üí°'
        };
        let tipoIcone = icones[termo.tipo] || 'üéØ';
        // T√≠tulo com √≠cone e texto juntos, ambos em amarelo e na mesma linha
        const card = {
            type: 'card',
            className: 'cs-term-card',
            title: `<span style="color:#FFD700;font-size:1.3em;vertical-align:middle;">${tipoIcone}</span> <span style="color:#FFD700;font-weight:bold;font-size:1.1em;vertical-align:middle;">${termo.termo}</span>`,
            desc: `<span class=\"cs-term-desc\">${termo.descricao}</span>`
        };
        // Adiciona legenda explicativa na primeira vez
        if (isFirstTime) {
            return {
                introText: "üìö Bem-vindo ao Gloss√°rio do CS! Aqui voc√™ encontra explica√ß√µes sobre g√≠rias e termos comuns do jogo. Veja o primeiro termo abaixo:",
                response: card,
                actions: [
                    { label: "Quero outro termo", message: "termos do cs", isPrimary: true }
                ],
                context: novoContexto,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        return {
            response: card,
            actions: [
                { label: "Quero outro termo", message: "termos do cs", isPrimary: true }
            ],
            context: novoContexto,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Pr√≥ximas partidas
    if (/(pr√≥xima partida|proxima partida|pr√≥ximo jogo|proximo jogo|quando a furia joga|qual o pr√≥ximo jogo|qual a pr√≥xima partida)/i.test(msg)) {
        const partidas = dataLoader.data.upcomingMatches;
        if (partidas && partidas.length > 0) {
            const partidasText = partidas.map((p, i) => {
                // Tradu√ß√£o do formato
                let formato = p.format;
                if (typeof formato === 'string') {
                    const lower = formato.toLowerCase();
                    if (lower === 'best of 1' || lower === 'bo1') formato = 'Melhor de 1 (MD1)';
                    else if (lower === 'best of 3' || lower === 'bo3') formato = 'Melhor de 3 (MD3)';
                    else if (lower === 'best of 5' || lower === 'bo5') formato = 'Melhor de 5 (MD5)';
                }
                return (
                    `üî• <b>${i + 1}. ${p.team1?.name || "FURIA"} vs ${p.team2?.name || "Advers√°rio"}</b> üî•\n` +
                    `üìÖ ${p.date || "Data n√£o definida"}\n` +
                    `‚è∞ ${p.time || "Hor√°rio n√£o definido"}\n` +
                    `üèÜ ${p.event?.name || "Evento n√£o definido"}\n` +
                    `üé≤ Formato: ${formato || "N√£o definido"}\n` +
                    `üìç Etapa: ${p.stage || "N√£o definida"}\n` +
                    (p.stream ? `üì∫ Transmiss√£o: ${p.stream}\n` : "")
                );
            }).join("\n\n");
            return {
                response: `<b>PR√ìXIMAS PARTIDAS DA FURIA</b>\n\n${partidasText}\nEm breve a nossa sele√ß√£o entrar√° no servidor! N√£o esque√ßa de acompanhar e torcer! üêæ`,
                actions: [
                    { label: "Membros da Equipe", message: "elenco" },
                    { label: "Ver Ranking", message: "ranking atual" },
                    { label: "Ver T√≠tulos", message: "t√≠tulos furia" }
                ],
                context,
                showFeedback: shouldShowFeedback('normal')
            };
        }
        return {
            response: "Ainda n√£o tenho a agenda completa das pr√≥ximas partidas, mas estou de olho!",
            actions: [
                { label: "Membros da Equipe", message: "elenco" },
                { label: "Ver Not√≠cias", message: "not√≠cias" }
            ],
            context,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Pr√≥ximos campeonatos/eventos (sem conflitar com pr√≥ximos jogos)
    if (/(pr√≥xim[oa]s? campeonatos?|eventos?|pr√≥xim[oa]s? torneios?|pr√≥xim[oa]s? competi√ß√µes?|pr√≥xim[oa]s? disputas?)/i.test(msg)) {
        const eventos = dataLoader.getUpcomingEvents();
        return {
            response: eventos,
            actions: [
                { label: "Ver Pr√≥ximos Jogos", message: "pr√≥xima partida" },
                { label: "Membros da Equipe", message: "elenco" },
                { label: "Ver Not√≠cias", message: "not√≠cias" }
            ],
            context,
            showFeedback: shouldShowFeedback('normal')
        };
    }

    // Comandos "escondidos" (n√£o est√£o nos quick buttons)
    if (/(comando|comandos|comando dispon√≠vel|comandos dispon√≠veis|comando disponivel|comandos disponiveis|comando oculto|comandos ocultos|comando secreto|comandos secretos)/i.test(msg)) {
        const comandos = [
            { cmd: "limpar chat", desc: "Limpa todo o hist√≥rico da conversa." },
            { cmd: "desenvolvedor", desc: "Mostra informa√ß√µes de contato do criador do bot." },
            { cmd: "fundador", desc: "Saiba um pouco mais sobre a funda√ß√£o da organiza√ß√£o." },
        ];
        let resposta = "<b>Comandos Escondidos do PanteraBot üêæ</b><br><br>";
        resposta += "Al√©m dos bot√µes r√°pidos, voc√™ pode digitar:<br>";
        resposta += comandos.map(c => `<b>${c.cmd}</b>: ${c.desc}`).join("<br>");
        resposta += "<br><br>Experimente digitar um deles!";
        return {
            response: resposta,
            actions: [
                { label: "Limpar Chat", message: "limpar chat" },
                { label: "Contato do Dev", message: "contato do desenvolvedor" }
            ],
            context,
            showFeedback: false
        };
    }

    // Comando para limpar chat
    if (/(limpar chat|apagar conversa|resetar chat|limpar hist√≥rico|limpar historico|resetar conversa|apagar hist√≥rico|apagar historico)/i.test(msg)) {
        return {
            response: "O chat foi limpo! Pode come√ßar uma nova conversa. üßπ",
            actions: null,
            context: {},
            showFeedback: false,
            clearChat: true // Sinaliza ao frontend para limpar o hist√≥rico
        };
    }
    // Comando para desenvolvedor
    if (/(desenvolvedor|sobre o projeto|sobre o bot|contato do dev|contato desenvolvedor|quem fez|quem criou|quem √© o dev|quem √© o desenvolvedor|quem √© o criador|quem fez o bot|quem criou o bot|contato do criador|contato do desenvolvedor)/i.test(msg)) {
        return {
            response: `<b>Sobre o projeto PanteraBot üêæ</b><br><br>Este chatbot foi desenvolvido por Andr√© Torres, apaixonado por tecnologia, esportes eletr√¥nicos e inova√ß√£o!<br><br><b>Contato para feedbacks, sugest√µes e parcerias:</b><br>üìß <a href='mailto:andrectorres17@gmail.com'>andrectorres17@gmail.com</a><br>üîó <a href='https://www.linkedin.com/in/andrectorress/' target='_blank'>LinkedIn: andrectorress</a><br><br>Fique √† vontade para entrar em contato! üòÉ`,
            actions: null,
            context,
            showFeedback: false
        };
    }

    // Se n√£o reconhecer a mensagem
    return {
        response: "Desculpe, n√£o entendi. Pode perguntar de outra forma? Estou aqui para ajudar! ü§ñ",
        actions: null,
        context,
        showFeedback: shouldShowFeedback('normal')
    };
}

// Fun√ß√£o auxiliar para deixar o destaque mais din√¢mico e interessante
function gerarTextoDinamicoDestaque(destaque, nome, ano) {
    if (!destaque) return '';
    // Exemplos de frases din√¢micas, pode ser expandido conforme criatividade
    const prefixos = [
        `O que marcou esse t√≠tulo:`,
        `Fato marcante desse campeonato:`,
        `Motivo para a torcida rugir:`,
        `Curiosidade desse caneco:`,
        `O diferencial dessa conquista:`
    ];
    // Escolhe um prefixo aleat√≥rio
    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];
    // Personaliza ainda mais se quiser, por exemplo, usando o nome do campeonato
    return `${prefixo} ${destaque}`;
}

module.exports = { processMessage };
